package com.ahnis.servaia.analysis.service;

import com.ahnis.servaia.analysis.dto.MoodReportApiResponse;
import com.ahnis.servaia.analysis.dto.MoodReportEmailResponse;
import com.ahnis.servaia.analysis.entity.MoodReportEntity;
import com.ahnis.servaia.analysis.exception.ReportNotFoundException;
import com.ahnis.servaia.analysis.mapper.ReportMapper;
import com.ahnis.servaia.analysis.repository.ReportRepository;
import com.ahnis.servaia.notification.service.NotificationService;
import com.ahnis.servaia.user.entity.User;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.Instant;
import java.util.List;
import java.util.concurrent.CompletableFuture;

@Slf4j
@Service
public class ReportService {
    private final JournalAnalysisService journalAnalysisService;
    private final ReportRepository reportRepository;
    private final NotificationService notificationService;
    private final ReportMapper reportMapper;

    public ReportService(JournalAnalysisService journalAnalysisService, ReportRepository reportRepository, NotificationService notificationService,
                         ReportMapper reportMapper) {
        this.journalAnalysisService = journalAnalysisService;
        this.reportRepository = reportRepository;
        this.notificationService = notificationService;
        this.reportMapper = reportMapper;
    }

    @Async
    public void sendReport(User user, MoodReportEmailResponse report, boolean hasTherapist) {
        log.info("Sending report to user: {}", user.getUsername());
        notificationService.sendEmailReport(user.getEmail(), report);

    }

    @Deprecated
    @Async
    @Transactional
    public void generateReport(User user, Instant startDate, Instant endDate) {
        try {
            // Analyze journals between startDate and endDate
            MoodReportEmailResponse moodReport = journalAnalysisService.analyzeUserMood(user.getId(), user.getUsername(), user.getPreferences(), startDate, endDate).join();

            // Save the report
            var reportEntity = reportMapper.toMoodReportEntity(user, moodReport);
            reportRepository.save(reportEntity);


            this.sendReport(user, moodReport, false);
            log.info("Report generated by method2 of reportService and saved for user: {}", user.getUsername());
        } catch (Exception e) {
            log.error("Failed to generate report for user: {}", user.getUsername(), e);
            throw new RuntimeException("Failed to generate report", e);
        }
    }

    @Async
    @Transactional
    public CompletableFuture<MoodReportEmailResponse> getGeneratedReport(User user, Instant startDate, Instant endDate) {
        try {
            // Analyze journals between startDate and endDate
            MoodReportEmailResponse moodReport = journalAnalysisService.analyzeUserMood(user.getId(), user.getUsername(), user.getPreferences(), startDate, endDate).join();

            // Save the report
            MoodReportEntity reportEntity = reportMapper.toMoodReportEntity(user, moodReport);
            reportRepository.save(reportEntity);
            log.info("Report generated by getGeneratedReport of reportService and saved for user: {}", user.getUsername());
            return CompletableFuture.completedFuture(moodReport);
        } catch (Exception e) {
            log.error("Failed to generate report for user: {}", user.getUsername(), e);
            throw new RuntimeException("Failed to generate report", e);
        }
    }


    public List<MoodReportApiResponse> getAllReportsByUserId(String userId) {
        return reportRepository.findByUserId(userId).stream()
                .map(reportMapper::toApiResponse)
                .toList();
    }

    public MoodReportApiResponse getReportById(String userId, String reportId) {
        return reportRepository.findByIdAndUserId(reportId, userId)
                .map(reportMapper::toApiResponse)
                .orElseThrow(() -> new ReportNotFoundException("Report Not found {report id %s , user id %s} ".formatted(reportId, userId)));

    }

    public MoodReportApiResponse getLatestReportByUserId(String userId) {
        return reportRepository.findFirstByUserIdOrderByReportDateDesc(userId)
                .map(reportMapper::toApiResponse)
                .orElseThrow(() -> new ReportNotFoundException("No reports found for %s userId".formatted(userId)));
    }
}
